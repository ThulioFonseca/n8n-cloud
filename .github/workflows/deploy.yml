name: Deploy N8N to Azure VM

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout do c√≥digo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configurar SSH
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VM_SSH_KEY }}

      # 3. Verificar conectividade
      - name: Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "echo 'SSH connection successful'"

      # 4. Sincronizar arquivos
      - name: Sync files to VM
        run: |
          rsync -avz --delete \
            --exclude '.env' \
            --exclude '*_data/' \
            --exclude '.git/' \
            --exclude 'README.md' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:~/n8n-cloud/

      # 5. Verificar .env
      - name: Check .env file
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd ~/n8n-cloud
            if [ ! -f .env ]; then
              echo 'ERRO: Arquivo .env n√£o encontrado!'
              exit 1
            else
              echo '.env encontrado ‚úì'
            fi
          "

      # 6. Preparar ambiente
      - name: Prepare environment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd ~/n8n-cloud
            
            # Parar containers antigos
            docker compose down --remove-orphans || true
            
            # Criar e ajustar diret√≥rios
            mkdir -p n8n_data
            sudo chown -R 1000:1000 n8n_data/ || true
            
            # Limpar dados corrompidos se necess√°rio
            if [ -f n8n_data/.corrupted ]; then
              echo 'Removendo dados corrompidos...'
              rm -rf n8n_data/*
            fi
          "

      # 7. Deploy da aplica√ß√£o
      - name: Deploy application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd ~/n8n-cloud
            
            echo '=== Baixando imagens ==='
            docker compose pull
            
            echo '=== Iniciando N8N ==='
            docker compose --env-file .env up n8n -d
            
            echo '=== Aguardando N8N (pode demorar at√© 2 minutos) ==='
            
            # Monitorar logs em background
            timeout 120 docker logs n8n -f &
            LOG_PID=\$!
            
            # Aguardar healthcheck
            for i in {1..24}; do
              if docker compose ps n8n | grep -q 'healthy'; then
                echo '‚úì N8N inicializado com sucesso!'
                kill \$LOG_PID 2>/dev/null || true
                break
              elif docker compose ps n8n | grep -q 'unhealthy'; then
                echo '‚úó N8N falhou no healthcheck'
                kill \$LOG_PID 2>/dev/null || true
                docker logs n8n --tail 20
                exit 1
              else
                echo \"Aguardando... (\$i/24)\"
                sleep 5
              fi
            done
            
            kill \$LOG_PID 2>/dev/null || true
            
            echo '=== Iniciando Nginx ==='
            docker compose --env-file .env up nginx -d
            
            sleep 10
          "

      # 8. Verificar deploy
      - name: Verify deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd ~/n8n-cloud
            
            echo '=== Status dos containers ==='
            docker compose ps
            
            echo '=== Verificando sa√∫de dos servi√ßos ==='
            
            # Verificar Nginx
            if curl -f -s http://localhost/health > /dev/null; then
              echo '‚úì Nginx est√° funcionando'
            else
              echo '‚úó Nginx n√£o est√° respondendo'
              docker logs nginx --tail 10
            fi
            
            # Verificar N8N diretamente
            if docker exec n8n wget -q --spider http://localhost:5678/ 2>/dev/null; then
              echo '‚úì N8N est√° respondendo diretamente'
            else
              echo '‚úó N8N n√£o est√° respondendo diretamente'
              docker logs n8n --tail 20
            fi
            
            # Verificar N8N via proxy (com retry)
            echo 'Testando N8N via proxy...'
            for i in {1..5}; do
              if curl -f -s -m 30 http://localhost/n8n/ > /dev/null; then
                echo '‚úì N8N acess√≠vel via proxy'
                break
              else
                echo \"Tentativa \$i/5 falhou, aguardando...\"
                sleep 10
              fi
            done
          "

      # 9. Logs finais
      - name: Show final logs
        if: always()
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd ~/n8n-cloud
            echo '=== Status final ==='
            docker compose ps
            echo '=== √öltimos logs do N8N ==='
            docker logs n8n --tail 15
            echo '=== √öltimos logs do Nginx ==='
            docker logs nginx --tail 10
          "

      # 10. Resultado final
      - name: Deployment summary
        run: |
          echo "üöÄ Deploy conclu√≠do!"
          echo "üåê N8N: http://${{ secrets.VM_HOST }}/n8n/"
          echo "üìä Status: http://${{ secrets.VM_HOST }}/health"
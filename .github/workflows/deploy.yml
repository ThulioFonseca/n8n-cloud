name: Deploy N8N Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  DEPLOY_PATH: "~/n8n-production"

jobs:
  deploy:
    name: Production Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VM_SSH_KEY }}

      - name: Verify SSH Connectivity
        run: |
          ssh -o StrictHostKeyChecking=no \
              -o ConnectTimeout=10 \
              ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
              "echo 'Connection verified'"

      - name: Sync Application Files
        run: |
          rsync -avz --delete \
            --exclude='.env' \
            --exclude='*_data/' \
            --exclude='.git/' \
            --exclude='*.md' \
            --exclude='.github/' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:${{ env.DEPLOY_PATH }}/

      - name: System Cleanup & Environment Setup
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd ${{ env.DEPLOY_PATH }}
            
            # Verify environment file
            [[ ! -f .env ]] && echo 'ERROR: .env file missing' && exit 1
            
            # Stop existing services
            docker compose down --remove-orphans 2>/dev/null || true
            
            # Docker system cleanup
            docker container prune -f
            docker image prune -f
            docker volume prune -f
            docker network prune -f
            
            # Setup data directory with proper permissions
            sudo rm -rf n8n_data/* n8n_data/.* 2>/dev/null || true
            mkdir -p n8n_data
            sudo chown -R 1000:1000 n8n_data/
            sudo chmod -R 755 n8n_data/
          "

      - name: Deploy Application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd ${{ env.DEPLOY_PATH }}
            
            # Pull latest images
            docker compose pull --quiet
            
            # Deploy services
            docker compose up -d --quiet-pull
            
            # Wait for services to stabilize
            sleep 20
          "

      - name: Verify Deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd ${{ env.DEPLOY_PATH }}
            
            # Check container status
            NGINX_STATUS=\$(docker compose ps nginx --format json | jq -r '.[0].State' 2>/dev/null || echo 'failed')
            N8N_STATUS=\$(docker compose ps n8n --format json | jq -r '.[0].State' 2>/dev/null || echo 'failed')
            
            echo \"Container Status: nginx=\$NGINX_STATUS, n8n=\$N8N_STATUS\"
            
            # Basic connectivity tests
            timeout 10 curl -sf http://localhost/health >/dev/null && echo '✓ Nginx healthy' || echo '✗ Nginx failed'
            timeout 15 curl -sf http://localhost/n8n/ >/dev/null && echo '✓ N8N accessible' || echo '✗ N8N failed'
          "

      - name: Deployment Summary
        run: |
          echo "🚀 Production deployment completed"
          echo "🌐 Application: http://${{ secrets.VM_HOST }}/n8n/"
          echo "📊 Health Check: http://${{ secrets.VM_HOST }}/health"